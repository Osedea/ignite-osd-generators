// @flow
import { fromJS } from 'immutable';
import {
    <%= props.name.toUpperCase() %>_FETCH_SUCCESS,
    <%= props.name.toUpperCase() %>_FETCH_FAIL,
    <%= props.name.toUpperCase() %>_FETCH_TRY,
} from './actions';

const initialState = fromJS({
    list: {},
    fetching: false,
    errors: null,
});

function <%= props.name.toLowerCase() %>ServiceReducer(state = initialState, action) {
    switch (action.type) {
        case <%= props.name.toUpperCase() %>_FETCH_TRY:
            return state.set('fetching', true)
                .set('errors', null);
        case <%= props.name.toUpperCase() %>_FETCH_SUCCESS:
            return state
                .set('list', fromJS(action.payload))
                .set('fetching', false)
                .set('errors', null);
        case <%= props.name.toUpperCase() %>_FETCH_FAIL:
            return state
                .set('fetching', false)
                .set('errors', action.payload);
        default:
            return state;
    }
}

export default <%= props.name.toLowerCase() %>ServiceReducer;
